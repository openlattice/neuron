/*
 * Copyright (C) 2017. OpenLattice, Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 */

plugins {
  id 'application'
  id 'java'
  id 'eclipse'
  id 'idea'
  id 'jacoco'
  id 'maven-publish'
  id 'checkstyle'
  id 'signing'
  id 'com.github.spotbugs' version '4.6.0'
  id 'org.jetbrains.kotlin.jvm' version '1.6.10'
  id 'org.jetbrains.kotlin.plugin.spring' version '1.6.10'
}

description = "Neuron Server"
group = "com.openlattice"
ext.projectName = "neuron"
ext.scmUrl = 'scm:git:https://github.com/openlattice/neuron.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/neuron.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/neuron.git'

distTar {
  archiveName "$baseName" + ".tgz"
}

apply from: "https://raw.githubusercontent.com/openlattice/openlattice/main/gradles/openlattice.gradle"

mainClassName = "com.openlattice.neuron.NeuronServer"

def N_XMS = "$System.env.NEURON_XMS"
def N_XMX = "$System.env.NEURON_XMX"
def N_ARGS = "$System.env.NEURON_ARGS"

if( N_XMS == 'null' || N_XMS == null || N_XMS == "" ) {
    N_XMS = '-Xms1g'
}

if( N_XMX == 'null' || N_XMX == null || N_XMX == "" ) {
    N_XMX = '-Xms4g'
}

if( N_ARGS == 'null' || N_ARGS == null || N_ARGS == "" ) {
    N_ARGS = 'local'
}

println "Using java args for running ${projectName}: Xms=" + N_XMS + ",Xmx=" + N_XMX + " -server"

applicationDefaultJvmArgs = [N_XMS, N_XMX, "-server"]
applicationDefaultJvmArgs += [ "--add-modules", "java.base",
                               "--add-modules", "java.se",
                               "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED",
                               "--add-opens","java.base/java.lang=ALL-UNNAMED",
                               "--add-opens","java.base/java.nio=ALL-UNNAMED",
                               "--add-opens","java.base/sun.nio.ch=ALL-UNNAMED",
                               "--add-opens","java.management/sun.management=ALL-UNNAMED",
                               "--add-opens","jdk.management/com.sun.management.internal=ALL-UNNAMED"]

sourceCompatibility=JavaVersion.VERSION_11
targetCompatibility=JavaVersion.VERSION_11

run {
    if( N_ARGS != null ) {
        args N_ARGS.split();
    } else if(System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

println "Enabled profiles: " + Arrays.toString(run.args)

checkstyle {
    toolVersion = '7.4'
    showViolations = false
    config project.resources.text.fromUri('https://raw.githubusercontent.com/openlattice/openlattice/main/gradles/checkstyle.xml')
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
spotbugs {
    reportLevel = 'high'
    toolVersion = "${spotbugs_annotations_version}"
}
spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

configurations {
    tests
      published.extendsFrom tests, archives
}

ext.odata_version='4.2.0'
dependencies {
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugs_version}"
    compileOnly "net.jcip:jcip-annotations:${jcip_version}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testCompileOnly "net.jcip:jcip-annotations:${jcip_version}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    implementation "com.openlattice:conductor-client:${conductor_client_version}"
    implementation "com.openlattice:api:${api_version}"
    implementation "com.openlattice:rhizome:${rhizome_version}"

    if ( project.hasProperty('developmentMode') && project.developmentMode ) {
        logger.quiet(project.name + " using project dependencies.")
        testImplementation( project(path: ":api", configuration: "tests"))
        testImplementation( project(path: ":rhizome", configuration: "tests"))
    } else {
        logger.quiet(project.name + " using jar dependencies.")
        testImplementation "com.openlattice:api:${api_version}:tests"
        testImplementation "com.openlattice:rhizome:${rhizome_version}:tests"
    }

    implementation "org.apache.olingo:odata-server-api:${odata_version}"
    implementation "org.apache.olingo:odata-server-core:${odata_version}"
    implementation "org.apache.olingo:odata-commons-api:${odata_version}"
    implementation "org.apache.olingo:odata-commons-core:${odata_version}"

    /*
     * TESTING
     */
    testImplementation "junit:junit:${junit_version}"
    testImplementation( "org.mockito:mockito-all:${mockito_version}" ) {
        exclude module : 'hamcrest'
        exclude module : 'hamcrest-core'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs+= ["--add-modules", "java.base",
                            "--add-modules", "java.se",
                            "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED"]
}

tasks.withType(Test) {
    jvmArgs += ["--add-modules", "java.base",
                "--add-modules", "java.se",
                "--add-exports","java.base/jdk.internal.ref=ALL-UNNAMED",
                "--add-opens","java.base/java.lang=ALL-UNNAMED",
                "--add-opens","java.base/java.nio=ALL-UNNAMED",
                "--add-opens","java.base/sun.nio.ch=ALL-UNNAMED",
                "--add-opens","java.management/sun.management=ALL-UNNAMED",
                "--add-opens", "jdk.management/com.ibm.lang.management.internal=ALL-UNNAMED",
                "--add-opens","jdk.management/com.sun.management.internal=ALL-UNNAMED"]
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += '-Xjvm-default=compatibility'
    }
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true

    ext.sourceCompatibility=JavaVersion.VERSION_11
    ext.targetCompatibility=JavaVersion.VERSION_11
}
